# дан произвольный  список - представтье его в обратном порядке

list_my = [2,4,6,8]
# print(list_my[::-1])
#если честно в этот метод списал, так как сначала начал пересталять местами вот так list_my[-3,0]
# не как не получалось и решил списать и не понял это [::-1] я не понял :: - начал искать не нашел
# что это  :: ???????????????

# Alexey: '::' это эквивалентно '0:0:0' просто нули из-за избыточности пропускаются
# так что слайс вида [::-1] эквивалентен [0:0:-1],
# где [начало:конец:шаг]

list_my = [2,4,6,8]
list_my.reverse()

rev_list = list(reversed(list_my))

# print(list_my, rev_list)

# стало стыдно что списал и не понял что списал, начал делать заново и нашел этот метод через команды работ со списками
#его и заюзал

# Задача 2
# напишите функцию change(Ist) которая принимает список и меняет его местами первый и последний элемент

list_fcb = ['pique','Gavi','suarez'] # Suarez ушел((
# change([1,0])
list_fcb[0], list_fcb[-1] = list_fcb[-1], list_fcb[0]
# print(list_fcb)

#решается через def я забил
# Alexey: решил не через def, def не дает решений, он создает функции которыми потом можно пользоваться много раз

# задача 3
# функция to_list() принимает неограниченное количество параметров.
# обработайте так что бы на выходе был список элементов

# долго думал над задачей вообще не оч понял но вот что нарешал

# Alexey: В твоей задаче по факту (в 35 строке) сказано создать функцию to_list, которая
# будет принимать сколько угодно элементов и помещать их в list

# laliga = {'sevilla','fcb','atletico'} # Alexey: тут к тебе вопрос, сам понимаешь хоть что ты создал?
# print(type(laliga))
# a = list(laliga)
# print(a)

# Alexey: задача решает подобным образом
def to_list(*args):
    return list(args)

a = to_list('133', 456, [123, 312])
b = to_list(1,2,34,5,67,8,9,12,34,5,6,7,89,4,2,13,4,6)

# print('',a, '\n', b)

#  в принципе суть ясна 
# Alexey: А теперь суть ясна?

# задача 4
# николай задумался о поиске «бесполезного» числа на основании списка.
# Суть оного в следующем: он берет произвольный список чисел,
# находит самое большое из них, а затем делит его на длину списка.
# Студент пока не придумал,
# где может пригодиться подобное значение,
# но ищет у вас помощи в реализации такой функции useless(s).

# a = {2,3,5,7,77} # Alexey: опять вопрос к тому что ты создал
# b = list(a)
# max_number = max(b)
# f = list(max_number) #он не присваивает максимальному числу выраженному через ф значение списка
# #Alexey: 71 строка ошибка
# s = (list(a)[:4]) # Alexey: тут надо поспрашивать по логике
# d = f / s
# print(d) #но логика решения верна
# Alexey: эту задачку я бы дорешал на занятии

#вариант2

# list_fire = [2,3,5,7,77]
# max(list_fire)
# print(max(list_fire))
# print(''.join(map(str,list_fire))) # Alexey: в задаче сказано про список чисел и про деление
#                                    # в итоге не понятно зачем ты числа преобразуешь к str
# a = sum([2,3,5,7])                 # откуда ты берешь эту строку
# print(a)
# c = max(list_fire) / a
# print(c) # Alexey: так что как итог задача два раза решена не правильно

#вот такой дикий изъебон , но проблема в том что 58 стока только дает представления
# что мы вычленили все из списка в числа но не смогли их выразить и как бы следующая строка если представить
# это й = числа из спика  которые мы потом суммируем и 77 делим на них
# это как в условии задачи я даже не понял что это  - такой функции useless(s)

# задача 5
# требуется создать функцию list_sort(list), которая сортирует список по убыванию
#
# list_number = [8,2,60,1,9,4,6]
# list_number.sort()
# print(list_number)
# это по увелечнию

# list_number = [8,2,60,1,9,4,6]
# list_number.sort(reverse=True)
# print(list_number)

# смотрел как используется эта команда так как до этого вообще не знал о ее существование на этой планете
# Alexey: смотреть/искать команды не стыдно а даже полезно всегда, этим будешь постоянно заниматься

# задача 6
# На входе имеем список строк разной длины.
# Необходимо написать функцию all_eq(lst), которая вернет новый список из строк одинаковой длины.
# Длину итоговой строки определяем исходя из самой большой из них.
# Если конкретная строка короче самой длинной,
# дополнить ее нижними подчеркиваниями с правого края до требуемого количества символов.
# Расположение элементов начального списка не менять

# list_dlina = ["saprtak","verder","cska","MU","atletico"]
# all_eq()
# print(list_dlina)

# Alexey: 
# list_dlina.sort(reverse=True, key=len)  # можно было бы использовать но нельзя переставдять местами элементы
#
# max_len = max([len(word) for word in list_dlina])
# for x in range(len(list_dlina)):
#     if len(list_dlina[x]) < max_len:
#         list_dlina[x] = list_dlina[x] + '_' * (max_len - len(list_dlina[x]))
# print(list_dlina)

# Лех изучал  этот all_eq(lst) увидел решения только с def
# и решил отложить так как королевская функция отложена
# а вообще я понял что эта функция сравнения и почему надо использовать def я не понимаю

# Alexey: 'def' это создание функции
# краткая теория
# def my_func(arg1, arg2): # 'my_func' это имя нашей новой функции, 'arg1' и 'arg2' 
                           # ее аргументы обработку которых мы описываем в блоке функции после табуляции
#   print(arg1 + arg2)

# my_func(1, 4) # Вызов функции с передачей аргументов (arg1 = 1, arg2 = 4)
#
#